// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Tools = require("../Utils/Tools.bs.js");
var Belt_Int = require("bs-platform/lib/js/belt_Int.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Belt_HashMapString = require("bs-platform/lib/js/belt_HashMapString.js");

function fromString(str) {
  return Belt_Option.getWithDefault(Belt_Int.fromString(Belt_Option.getWithDefault(str, "0")), 0);
}

function parseData(lines) {
  var regExp = /^(\d+)-(\d+) ([a-z]{1}): ([a-z]+)$/;
  return Belt_Array.reduce(lines, [], (function (acc, line) {
                var result = regExp.exec(line);
                if (result === null) {
                  return acc;
                }
                var caps = Belt_Array.map(result, (function (x) {
                        if (x == null) {
                          return ;
                        } else {
                          return Caml_option.some(x);
                        }
                      }));
                var item_min = fromString(Caml_array.get(caps, 1));
                var item_max = fromString(Caml_array.get(caps, 2));
                var item_letter = Belt_Option.getWithDefault(Caml_array.get(caps, 3), "");
                var item_data = Belt_Option.getWithDefault(Caml_array.get(caps, 4), "");
                var item = {
                  min: item_min,
                  max: item_max,
                  letter: item_letter,
                  data: item_data
                };
                return Belt_Array.concat(acc, [item]);
              }));
}

function checkPasswords(passwords) {
  return Belt_Array.keep(Belt_Array.map(passwords, (function (password) {
                    var freqs = Belt_HashMapString.make(10);
                    Belt_Array.forEach(password.data.split(""), (function (letter) {
                            var value = Belt_HashMapString.get(freqs, letter);
                            var value$1 = value !== undefined ? value + 1 | 0 : 1;
                            return Belt_HashMapString.set(freqs, letter, value$1);
                          }));
                    var value = Belt_HashMapString.get(freqs, password.letter);
                    var value$1 = value !== undefined ? value : -1;
                    if (password.min <= value$1) {
                      return value$1 <= password.max;
                    } else {
                      return false;
                    }
                  })), (function (x) {
                return x;
              })).length;
}

console.log("Day 02, Part 01:");

console.log(checkPasswords(parseData(Tools.readLinesInputData("./input/aoc2020/day02.txt"))));

exports.fromString = fromString;
exports.parseData = parseData;
exports.checkPasswords = checkPasswords;
/*  Not a pure module */
