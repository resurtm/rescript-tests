// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Tools = require("../Utils/Tools.bs.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");

function combinations(elems) {
  return Belt_Array.reduceWithIndex(elems, [], (function (acc, x, idx) {
                return Belt_Array.concat(acc, Belt_Array.map(Belt_Array.sliceToEnd(elems, idx + 1 | 0), (function (y) {
                                  return [
                                          x,
                                          y
                                        ];
                                })));
              }));
}

function calcDay01Part01(input) {
  return Belt_Array.get(Belt_Array.keepMap(Belt_Array.reduce(Belt_Array.mapWithIndex(input, (function (i, x) {
                            return Belt_Array.map(Belt_Array.sliceToEnd(input, i), (function (y) {
                                          if (2020 === (x + y | 0)) {
                                            return Math.imul(x, y);
                                          }
                                          
                                        }));
                          })), [], (function (x, a) {
                        return Belt_Array.concat(a, x);
                      })), (function (x) {
                    return x;
                  })), 0);
}

function calcDay01Part01Impl2(input) {
  return Belt_Array.get(Belt_Array.reduce(combinations(input), [], (function (acc, param) {
                    var y = param[1];
                    var x = param[0];
                    if ((x + y | 0) === 2020) {
                      return Belt_Array.concat(acc, [Math.imul(x, y)]);
                    } else {
                      return acc;
                    }
                  })), 0);
}

function calcDay01Part02(input) {
  return Belt_Array.get(Belt_Array.keepMap(Belt_Array.reduce(Belt_Array.reduce(Belt_Array.mapWithIndex(input, (function (i, x) {
                                var out = Belt_Array.sliceToEnd(input, i);
                                return Belt_Array.mapWithIndex(out, (function (j, y) {
                                              return Belt_Array.map(Belt_Array.sliceToEnd(out, j), (function (z) {
                                                            if (2020 === ((x + y | 0) + z | 0)) {
                                                              return Math.imul(Math.imul(x, y), z);
                                                            }
                                                            
                                                          }));
                                            }));
                              })), [], (function (x, a) {
                            return Belt_Array.concat(a, x);
                          })), [], (function (x, a) {
                        return Belt_Array.concat(a, x);
                      })), (function (x) {
                    return x;
                  })), 0);
}

function calcDay01Part02Impl2(input) {
  var result = {
    contents: undefined
  };
  Belt_Array.forEachWithIndex(input, (function (i, x) {
          return Belt_Array.forEachWithIndex(Belt_Array.sliceToEnd(input, i), (function (j, y) {
                        return Belt_Array.forEach(Belt_Array.sliceToEnd(input, j), (function (z) {
                                      if (((x + y | 0) + z | 0) === 2020) {
                                        result.contents = Math.imul(Math.imul(x, y), z);
                                        return ;
                                      }
                                      
                                    }));
                      }));
        }));
  return result.contents;
}

var data = Tools.readIntsInputData("./input/aoc2020/day01.txt");

console.log("Day 01, Part 01:");

console.log(calcDay01Part01Impl2(data));

console.log("Day 01, Part 02:");

console.log(calcDay01Part02Impl2(data));

var goal = 2020;

exports.goal = goal;
exports.combinations = combinations;
exports.calcDay01Part01 = calcDay01Part01;
exports.calcDay01Part01Impl2 = calcDay01Part01Impl2;
exports.calcDay01Part02 = calcDay01Part02;
exports.calcDay01Part02Impl2 = calcDay01Part02Impl2;
exports.data = data;
/* data Not a pure module */
